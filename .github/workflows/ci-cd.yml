name: Product CRUD CI/CD

# Define when this workflow will run
on:
  push:
    branches: [main, master]
    paths:
      - 'packages/backend/**'
      - 'packages/frontend/**'
      - '.github/workflows/**'
      - 'package.json'
      - 'pnpm-workspace.yaml'
  pull_request:
    branches: [main, master]
    paths:
      - 'packages/backend/**'
      - 'packages/frontend/**'
      - '.github/workflows/**'
      - 'package.json'
      - 'pnpm-workspace.yaml'

# Default permissions
permissions:
  contents: read

# Cancel in-progress runs when a new workflow with the same group is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Define the jobs in the workflow
jobs:
  # Check if backend files changed
  paths-filter:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            backend:
              - 'packages/backend/**'
              - 'package.json'
              - 'pnpm-workspace.yaml'
            frontend:
              - 'packages/frontend/**'
              - 'package.json'
              - 'pnpm-workspace.yaml'

  # Backend tests job
  backend-test:
    needs: paths-filter
    if: ${{ needs.paths-filter.outputs.backend == 'true' }}
    runs-on: ubuntu-latest # Use Ubuntu as the operating system

    # Define a matrix strategy to test with multiple Node.js versions
    strategy:
      matrix:
        node-version: [18.x, 20.x] # Test with both Node.js 18 and 20

    steps:
      # Step 1: Check out the repository code
      - uses: actions/checkout@v4

      # Step 2: Install pnpm package manager first
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
          run_install: false

      # Step 3: Set up Node.js with the version from the matrix
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm' # Now pnpm is available for caching

      # Step 4: Get pnpm cache path for better caching
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      # Step 5: Set up caching for faster builds
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # Step 6: Install project dependencies
      - name: Install dependencies
        run: pnpm install

      # Step 7: Run unit tests
      - name: Run backend unit tests
        run: |
          cd packages/backend
          pnpm test

      # Step 8: Run integration tests
      - name: Run backend integration tests
        run: |
          cd packages/backend
          pnpm test:integration

      # Step 9: Run tests with coverage
      - name: Run backend coverage tests
        run: |
          cd packages/backend
          pnpm test:coverage

      # Step 10: Upload coverage reports to codecov
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          directory: ./packages/backend/coverage/
          flags: backend
          name: backend-coverage

  # Second job: Build the backend application
  build-backend:
    needs: [paths-filter, backend-test]
    if: ${{ needs.paths-filter.outputs.backend == 'true' }}
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository code
      - uses: actions/checkout@v4

      # Step 2: Install pnpm package manager first
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
          run_install: false

      # Step 3: Set up Node.js
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x' # Use Node.js 20 for building
          cache: 'pnpm'

      # Step 4: Install project dependencies
      - name: Install dependencies
        run: pnpm install

      # Step 5: Build the backend application
      - name: Build backend
        run: |
          cd packages/backend
          pnpm build

      # Step 6: Save the build artifacts for later jobs
      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: packages/backend/dist

  # Third job: Deploy backend to a preview environment (for PRs)
  deploy-backend-preview:
    if: github.event_name == 'pull_request' && needs.paths-filter.outputs.backend == 'true'
    needs: [paths-filter, build-backend]
    runs-on: ubuntu-latest
    environment:
      name: preview
      # The URL will be set by Vercel automatically

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Download the build artifacts
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: packages/backend/dist

      # Step 3: Install Node.js (for Vercel CLI)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      # Step 4: Install Vercel CLI
      - name: Install Vercel CLI
        run: npm install -g vercel

      # Step 5: Deploy to Vercel (Preview)
      - name: Deploy to Vercel Preview
        working-directory: packages/backend
        run: vercel deploy --token \${{ secrets.VERCEL_TOKEN }} --yes

  # Fourth job: Deploy backend to production (for pushes to main)
  deploy-backend-production:
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && needs.paths-filter.outputs.backend == 'true'
    needs: [paths-filter, build-backend]
    runs-on: ubuntu-latest
    environment:
      name: production
      # The URL will be set by Vercel automatically

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Download the build artifacts
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: packages/backend/dist

      # Step 3: Install Node.js (for Vercel CLI)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      # Step 4: Install Vercel CLI
      - name: Install Vercel CLI
        run: npm install -g vercel

      # Step 5: Deploy to Vercel Production
      - name: Deploy to Vercel (Production)
        working-directory: packages/backend
        run: vercel deploy --token \${{ secrets.VERCEL_TOKEN }} --prod --yes

      # Step 6: Send notification about successful deployment
      - name: Send deployment notification
        if: success()
        run: echo "Successfully deployed backend to Vercel production environment"

  # Frontend jobs
  # Frontend build and test job
  frontend-build:
    needs: paths-filter
    if: \${{ needs.paths-filter.outputs.frontend == 'true' }}
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the repository code
      - uses: actions/checkout@v4

      # Step 2: Install pnpm package manager
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
          run_install: false

      # Step 3: Set up Node.js
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      # Step 4: Install dependencies
      - name: Install dependencies
        run: pnpm install

      # Step 5: Run tests (when we add them later)
      - name: Run frontend tests
        run: |
          cd packages/frontend
          # Uncomment when tests are added
          # pnpm test

      # Step 6: Build the frontend
      - name: Build frontend
        run: |
          cd packages/frontend
          pnpm build

      # Step 7: Archive the build
      - name: Archive frontend build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: packages/frontend/dist

  # Deploy frontend to Vercel (production only)
  deploy-frontend-to-vercel:
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && needs.paths-filter.outputs.frontend == 'true'
    needs: [paths-filter, frontend-build]
    runs-on: ubuntu-latest
    environment:
      name: production-frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: packages/frontend/dist

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Deploy to Vercel Production
        working-directory: packages/frontend
        run: vercel deploy --token ${{ secrets.VERCEL_TOKEN }} --prod --yes
        env:
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}

  # Deploy frontend to Vercel (preview for PRs)
  deploy-frontend-to-vercel-preview:
    if: github.event_name == 'pull_request' && needs.paths-filter.outputs.frontend == 'true'
    needs: [paths-filter, frontend-build]
    runs-on: ubuntu-latest
    environment:
      name: preview-frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: packages/frontend/dist

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Deploy to Vercel Preview
        working-directory: packages/frontend
        run: vercel deploy --token ${{ secrets.VERCEL_TOKEN }} --yes
        env:
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
